[{"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\index.js":"1","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\reportWebVitals.js":"2","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\App.js":"3","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\components\\navbar.js":"4","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\about.js":"5","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\upload.js":"6","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\components\\exifdisplay.js":"7","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\privacy.js":"8"},{"size":1117,"mtime":1609954723982,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":632,"mtime":1609954718070,"results":"12","hashOfConfig":"10"},{"size":742,"mtime":1609352153016,"results":"13","hashOfConfig":"10"},{"size":5614,"mtime":1609962214946,"results":"14","hashOfConfig":"10"},{"size":7523,"mtime":1609960224742,"results":"15","hashOfConfig":"10"},{"size":3141,"mtime":1609371841828,"results":"16","hashOfConfig":"10"},{"size":4104,"mtime":1609952753677,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nd64e0",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\index.js",[],"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\reportWebVitals.js",[],["36","37"],"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\App.js",[],"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\components\\navbar.js",[],"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\about.js",["38"],"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\upload.js",["39","40","41","42","43"],"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\components\\exifdisplay.js",["44"],"import { Pagination, Table } from \"react-bootstrap\";\r\n\r\nconst { useState } = require(\"react\")\r\n\r\nfunction DisplayExif(props) {\r\n    // Because the exif properties are returned as objects AND we want to extract the keys out of it and display it, we need to extract them then index the object with them\r\n    var splitTags = Object.keys(props.exif.tags);\r\n    var pages = Math.ceil(splitTags.length / 10);\r\n\r\n    // array to hold our paginator buttons\r\n    var paginationItems = []\r\n    const [activePage, setPage] = useState(1)\r\n\r\n    for (let index = 1; index < pages + 1; index++) {\r\n        paginationItems.push(\r\n            <Pagination.Item active={index == activePage} onClick={() => { setPage(index) }}>\r\n                {index}\r\n            </Pagination.Item>\r\n        )\r\n    }\r\n\r\n    // pagination borrowed from: https://shouts.dev/easiest-way-to-paginate-an-array-in-javascript\r\n    function paginator(items, current_page, per_page_items) {\r\n        let page = current_page || 1,\r\n            per_page = per_page_items || 10,\r\n            offset = (page - 1) * per_page,\r\n\r\n            paginatedItems = items.slice(offset).slice(0, per_page_items),\r\n            total_pages = Math.ceil(items.length / per_page);\r\n\r\n        return {\r\n            page: page,\r\n            per_page: per_page,\r\n            pre_page: page - 1 ? page - 1 : null,\r\n            next_page: (total_pages > page) ? page + 1 : null,\r\n            total: items.length,\r\n            total_pages: total_pages,\r\n            data: paginatedItems\r\n        };\r\n    }\r\n\r\n    // Make sure we can't change page to less than 1, or more than max pages\r\n    function changePage(diff) {\r\n        setPage(Math.min(Math.max(1, activePage + diff), pages));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                // If there are no pages to show, then don't bother even drawing the pagination element\r\n                pages > 0 ?\r\n                    <Pagination >\r\n                        <Pagination.Prev onClick={ () => { changePage(-1) } } />\r\n                        {paginationItems}\r\n                        <Pagination.Next onClick={ () => { changePage(1) } } />\r\n                    </Pagination> : undefined\r\n            }\r\n\r\n            <Table striped bordered responsive size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Data Header</th>\r\n                        <th>Data Value</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {\r\n                        splitTags.length > 0 ? paginator(splitTags, activePage, 10).data.map(key => {\r\n                            return (\r\n                                <tr key={`exif-${key}`}>\r\n                                    <td>{key}</td>\r\n                                    <td>{props.exif.tags[key]}</td>\r\n                                </tr>\r\n                            )\r\n                        }) : <tr><td colSpan=\"2\" className=\"text-center\">No EXIF data to display!</td></tr>\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayExif;","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\privacy.js",["45","46"],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":10,"nodeType":"53","messageId":"54","endLine":1,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":55,"column":13,"nodeType":"53","messageId":"57","endLine":55,"endColumn":17},{"ruleId":"58","severity":1,"message":"59","line":116,"column":74,"nodeType":"60","messageId":"61","endLine":116,"endColumn":76},{"ruleId":"58","severity":1,"message":"59","line":116,"column":92,"nodeType":"60","messageId":"61","endLine":116,"endColumn":94},{"ruleId":"62","severity":1,"message":"63","line":123,"column":44,"nodeType":"64","endLine":123,"endColumn":118},{"ruleId":"65","severity":1,"message":"66","line":129,"column":50,"nodeType":"67","messageId":"68","endLine":129,"endColumn":52},{"ruleId":"65","severity":1,"message":"69","line":16,"column":44,"nodeType":"67","messageId":"68","endLine":16,"endColumn":46},{"ruleId":"65","severity":1,"message":"66","line":77,"column":36,"nodeType":"67","messageId":"68","endLine":77,"endColumn":38},{"ruleId":"65","severity":1,"message":"69","line":78,"column":43,"nodeType":"67","messageId":"68","endLine":78,"endColumn":45},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-redeclare","'file' is already defined.","redeclared","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]