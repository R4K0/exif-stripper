[{"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\index.js":"1","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\reportWebVitals.js":"2","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\App.js":"3","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\components\\navbar.js":"4","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\about.js":"5","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\upload.js":"6","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\components\\exifdisplay.js":"7","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\privacy.js":"8"},{"size":1117,"mtime":1609954723982,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":632,"mtime":1609954718070,"results":"12","hashOfConfig":"10"},{"size":742,"mtime":1609352153016,"results":"13","hashOfConfig":"10"},{"size":5614,"mtime":1609962214946,"results":"14","hashOfConfig":"10"},{"size":7466,"mtime":1609966541011,"results":"15","hashOfConfig":"10"},{"size":3141,"mtime":1609371841828,"results":"16","hashOfConfig":"10"},{"size":4490,"mtime":1609966654244,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"shtnsh",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\index.js",[],["38","39"],"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\reportWebVitals.js",[],"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\App.js",[],"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\components\\navbar.js",[],"E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\about.js",["40"],"import { useState } from \"react\";\r\nimport { Component } from \"react\";\r\nimport { Alert, Col, Container, Row } from \"react-bootstrap\";\r\n\r\n// About page\r\nclass About extends Component {\r\n\r\n    // Whenever the alert should be displayed (About alert)\r\n    state = {\r\n        showComponent: true\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                {this.state.showComponent &&\r\n                    <Alert variant=\"success\" show={this.state.showComponent} dismissible=\"true\" onClose={() => this.setState({ showComponent: false })}>\r\n                        <Alert.Heading>Hey! Thanks for checking out the About section!</Alert.Heading>\r\n                        <p>\r\n                            This website was made as a part of my Software Development project. Literal blood and sweat were invested in making of it!\r\n                        </p>\r\n                        <hr />\r\n                        <p>\r\n                            If you have any feedback, don't forget to pass it over along to milosz@rako.dev\r\n                        </p>\r\n                    </Alert>\r\n                }\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <h3>What is this website about?</h3>\r\n                        <p>\r\n                            Exif-Toolset provides a way to remove and read EXIF data from the pictures you submit.\r\n                        </p>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3>What is EXIF?</h3>\r\n                        <p>\r\n                            According to google, Exchangeable image file format (officially Exif, according to JEIDA/JEITA/CIPA specifications) is a standard that specifies the formats for images, sound, and ancillary tags used by digital cameras (including smartphones), scanners and other systems handling image and sound files recorded by digital cameras.\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <h3>Aren't there loads of those services? Why should I use this one?</h3>\r\n                        <p>\r\n                            Most of the other services require you to actually upload the file to their server, which does who-knows-what. They might be storing your picture and not even tell you.\r\n                            This service achieves the same, but client-side - Meaning no picture is ever sent to the internet!\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <h3>Why is it important to remove EXIF data?</h3>\r\n                        <h5>Short Answer</h5>\r\n                        <p>\r\n                            For your <strong>privacy</strong>.\r\n                        </p>\r\n\r\n                        <h5>Long answer</h5>\r\n                        <p>\r\n                            EXIF data contains possibly sensitive data which is saved at the moment of taking of the picture/video.<br />\r\n                            Data such as the lens information (shutter speed, focal length, aperature), GPS location of the photo taken, camera manifacturer and so on.\r\n                        </p>\r\n\r\n                        <p>\r\n                            When you upload such a photo to the internet, anybody can download it and read that data using widely available software. You could potentially tell people where you live, by simply taking a picture of your pet wearing that cute jumper and sharing it on internet!\r\n                        </p>\r\n\r\n                        <h5>Does it mean I have to remove all of my Facebook and Instagram photos?!</h5>\r\n                        <p>No! Good news is, that all of the major social media websites already strips that data for you!<br /><br />\r\n\r\n                        There's still a possibility that Facebook or other big corporations collect and resell EXIF data before removing it, so this tool gives you a chance to check if your photo contains any EXIF data.\r\n                        </p>\r\n\r\n                        <h5>What stops you from collecting such data?</h5>\r\n                        <p>Good point. <strong>Absolutely nothing</strong>. It is really up to you whom to trust, but I know I'd rather put my trust in a student who put his name and face behind this website, rather than trusting multi billionaire companies known for reselling your data to the advertising companies.</p>\r\n                    \r\n                        <h5>But wait!</h5>\r\n                        <p>\r\n                            There is one way to verify good-intentions of this website. Use either wire-shark or good old browser console to see what type of requests are being sent out to\r\n                            the external server. You'll see that when you submit the image, the image itself <strong>isn't</strong> being sent.<br/><br/>\r\n\r\n                            There is only one \"phoning home\" call on image submission. It's letting me know when our service is being used. No data is being sent out, but I do collect the user IPs.<br/><br/>\r\n                            This is not a big deal, as there is a <a href=\"/privacy\">privacy page</a>, that allows you to either remove the data from our servers or make it anonymous by removing the IP information but leaving only the date you've used the service at.\r\n                        </p>\r\n                    </Col>\r\n\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About;","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\upload.js",["41","42","43","44","45"],"import { useCallback, useEffect, useState } from \"react\";\r\nimport { Alert, Button, Card, Col, Container, Row } from \"react-bootstrap\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport ExifParser from \"exif-parser\";\r\nimport DisplayExif from './../components/exifdisplay';\r\nimport piex from \"piexifjs\";\r\nimport axios from \"axios\";\r\n\r\n// You can actually see me mixing usage of functional components and class components.\r\n// This is because the library I use for drag and dropping elements only showed examples for functional components and I could not figure out how to\r\n// implement it in a class component. In a way, I kind of like functional components more.\r\n\r\nfunction UploadPage() {\r\n    // Set all the State properties up here\r\n    const [currentImage, setImage] = useState();\r\n    const [exifData, setDataExif] = useState(false);\r\n    const [error, setError] = useState();\r\n    const [recordAmount, setRecords] = useState(undefined);\r\n    const [NoEXIFURI, setNoExifURI] = useState(undefined);\r\n\r\n\r\n    // This is equivalent of componentDidMount, a hacky one, though. \r\n    useEffect(() => {\r\n        // As we load into the page for the first time, request distinct amount of users that used the website.\r\n        axios.get('/statistics/distinct').then(response => {\r\n            if (response?.data?.count !== undefined) {\r\n                setRecords(response.data.count)\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }, [])\r\n\r\n\r\n    //source: https://stackoverflow.com/questions/3916191/download-data-url-file\r\n    function download(dataurl, filename) {\r\n        var a = document.createElement(\"a\");\r\n        a.href = dataurl;\r\n        a.setAttribute(\"download\", filename);\r\n        a.click();\r\n    }\r\n\r\n    const onDrop = useCallback((file, err) => {\r\n        // We only care about the first file.\r\n        if (err[0]?.errors?.length > 0) {\r\n            setError(err[0].errors[0].message);\r\n            return;\r\n        }\r\n\r\n        const instance = axios.create()\r\n\r\n        // Not much needed to pass, the back-end will take care of extracting the request IP by itself.\r\n        instance.post(\"/statistics/add\").catch(err => { })\r\n\r\n        var file = file[0];\r\n\r\n        // Not sure how to re-use one filereader for many different read types (BinaryString, ArrayBuffer) etc. because they are all call-back based\r\n        // and I can't define a callback per type of load.\r\n        const fileReader = new FileReader();\r\n        const arrayBufferReader = new FileReader()\r\n\r\n        // with this one I am trying to extract the exif data for display\r\n        arrayBufferReader.onload = (e) => {\r\n            var parser = ExifParser.create(e.target.result)\r\n            parser.enableSimpleValues(true) // Cast all the values to be human-readable.\r\n\r\n            var result\r\n            try {\r\n                result = parser.parse()\r\n            } catch (err) {\r\n                setError(\"File is corruped/File extension is incompatible\")\r\n                return;\r\n            }\r\n\r\n            setDataExif(result)\r\n\r\n            console.log();\r\n        }\r\n\r\n        // With this one I am simply setting the image as the displayed image.\r\n        arrayBufferReader.readAsArrayBuffer(file)\r\n        fileReader.onload = (e) => {\r\n            try{\r\n                var result = piex.remove(e.target.result)\r\n                setImage(e.target.result);\r\n\r\n                setNoExifURI({ name: `noexif-${file.name}`, data: result });\r\n            } catch(e) {\r\n\r\n            }\r\n        }\r\n\r\n        fileReader.readAsDataURL(file)\r\n    }, []);\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop, accept: 'image/jpeg' });\r\n    return (\r\n        <Container>\r\n            {/* Error is not visible if error is undefined */}\r\n            {\r\n                error ?\r\n                    <Alert variant=\"danger\" dismissible onClose={() => setError(null)} >\r\n                        <Alert.Heading>\r\n                            ❌ Oh no!\r\n                        </Alert.Heading>\r\n\r\n                        <p>{error}</p>\r\n                    </Alert> : undefined\r\n            }\r\n\r\n\r\n            <Row>\r\n                <Col>\r\n                    {/* This card is responsible for drag and dropping of the file and reading the file */}\r\n                    <h4>EXIF Inspector</h4>\r\n                    <Card {...getRootProps()} className={`${isDragActive && 'bg-secondary' || 'bg-primary'} text-white d-flex align-items-center justify-content-center h-25`} >\r\n                        <input {...getInputProps()}></input>\r\n                        {isDragActive ? <span>Drop the image here!</span> : <span>Drag and drop your image here (or click here)</span>}\r\n                    </Card>\r\n\r\n                    <div className=\"d-flex justify-content-center mt-3\" style={{ borderStyle: currentImage ? \"groove\" : \"none\" }}>\r\n                        {\r\n                            currentImage ? <img src={currentImage} style={{ maxWidth: \"400px\", maxHeight: \"300px\" }}></img> : undefined\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-center mt-3\" >\r\n                        {\r\n                            NoEXIFURI && exifData!= false && Object.keys(exifData.tags).length > 0 ? <Button className=\"btn-success\" onClick={() => {\r\n                                download(NoEXIFURI.data, NoEXIFURI.name)\r\n                            }}>Download the image with EXIF data stripped!</Button> : undefined\r\n                        }\r\n                    </div>\r\n\r\n                </Col>\r\n\r\n                <Col>\r\n                    <Alert variant=\"warning \">\r\n                        <Alert.Heading>\r\n                            Read this first!\r\n                        </Alert.Heading>\r\n\r\n                        <p>Each usage of this service will be logged to our external database.</p>\r\n                        <p>This is only done to satisfy my colleges' submission requirements and for statistics purpose.</p>\r\n                        <hr />\r\n\r\n                        <Alert.Heading>What is being saved?</Alert.Heading>\r\n                        <p><strong>Neither</strong> your EXIF data or the picture is being saved. All that is being saved is your IP address and the date and time at which you've interacted with this service</p>\r\n                        <p>You are <strong>able</strong> to anonymise this data (remove the IP address) or delete it altogether from <a href=\"/privacy\">this</a> page</p>\r\n\r\n                        {/* If we failed to fetch records, it'll stay as undefined, therefore we don't show that section then */}\r\n                        {recordAmount !== undefined ? <div>\r\n                            <hr />\r\n                            By the way, <strong>{recordAmount}</strong> unique people have trusted this website to check their images!\r\n                        </div> : undefined}\r\n                    </Alert>\r\n\r\n                    {!exifData ?\r\n                        <Alert variant=\"info\" className=\"mp-0\">\r\n                            To view the photos' EXIF information, please drag and drop your file on the box to the left.\r\n                        </Alert>\r\n                        :\r\n                        <DisplayExif exif={exifData}></DisplayExif>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default UploadPage;","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\components\\exifdisplay.js",["46"],"import { Pagination, Table } from \"react-bootstrap\";\r\n\r\nconst { useState } = require(\"react\")\r\n\r\nfunction DisplayExif(props) {\r\n    // Because the exif properties are returned as objects AND we want to extract the keys out of it and display it, we need to extract them then index the object with them\r\n    var splitTags = Object.keys(props.exif.tags);\r\n    var pages = Math.ceil(splitTags.length / 10);\r\n\r\n    // array to hold our paginator buttons\r\n    var paginationItems = []\r\n    const [activePage, setPage] = useState(1)\r\n\r\n    for (let index = 1; index < pages + 1; index++) {\r\n        paginationItems.push(\r\n            <Pagination.Item active={index == activePage} onClick={() => { setPage(index) }}>\r\n                {index}\r\n            </Pagination.Item>\r\n        )\r\n    }\r\n\r\n    // pagination borrowed from: https://shouts.dev/easiest-way-to-paginate-an-array-in-javascript\r\n    function paginator(items, current_page, per_page_items) {\r\n        let page = current_page || 1,\r\n            per_page = per_page_items || 10,\r\n            offset = (page - 1) * per_page,\r\n\r\n            paginatedItems = items.slice(offset).slice(0, per_page_items),\r\n            total_pages = Math.ceil(items.length / per_page);\r\n\r\n        return {\r\n            page: page,\r\n            per_page: per_page,\r\n            pre_page: page - 1 ? page - 1 : null,\r\n            next_page: (total_pages > page) ? page + 1 : null,\r\n            total: items.length,\r\n            total_pages: total_pages,\r\n            data: paginatedItems\r\n        };\r\n    }\r\n\r\n    // Make sure we can't change page to less than 1, or more than max pages\r\n    function changePage(diff) {\r\n        setPage(Math.min(Math.max(1, activePage + diff), pages));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                // If there are no pages to show, then don't bother even drawing the pagination element\r\n                pages > 0 ?\r\n                    <Pagination >\r\n                        <Pagination.Prev onClick={ () => { changePage(-1) } } />\r\n                        {paginationItems}\r\n                        <Pagination.Next onClick={ () => { changePage(1) } } />\r\n                    </Pagination> : undefined\r\n            }\r\n\r\n            <Table striped bordered responsive size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Data Header</th>\r\n                        <th>Data Value</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {\r\n                        splitTags.length > 0 ? paginator(splitTags, activePage, 10).data.map(key => {\r\n                            return (\r\n                                <tr key={`exif-${key}`}>\r\n                                    <td>{key}</td>\r\n                                    <td>{props.exif.tags[key]}</td>\r\n                                </tr>\r\n                            )\r\n                        }) : <tr><td colSpan=\"2\" className=\"text-center\">No EXIF data to display!</td></tr>\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayExif;","E:\\College\\Data Representation and Quering\\Project\\exif-stripper\\src\\pages\\privacy.js",["47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":10,"nodeType":"55","messageId":"56","endLine":1,"endColumn":18},{"ruleId":"57","severity":1,"message":"58","line":55,"column":13,"nodeType":"55","messageId":"59","endLine":55,"endColumn":17},{"ruleId":"60","severity":1,"message":"61","line":116,"column":74,"nodeType":"62","messageId":"63","endLine":116,"endColumn":76},{"ruleId":"60","severity":1,"message":"61","line":116,"column":92,"nodeType":"62","messageId":"63","endLine":116,"endColumn":94},{"ruleId":"64","severity":1,"message":"65","line":123,"column":44,"nodeType":"66","endLine":123,"endColumn":118},{"ruleId":"67","severity":1,"message":"68","line":129,"column":50,"nodeType":"69","messageId":"70","endLine":129,"endColumn":52},{"ruleId":"67","severity":1,"message":"71","line":16,"column":44,"nodeType":"69","messageId":"70","endLine":16,"endColumn":46},{"ruleId":"67","severity":1,"message":"68","line":83,"column":36,"nodeType":"69","messageId":"70","endLine":83,"endColumn":38},{"ruleId":"67","severity":1,"message":"71","line":84,"column":43,"nodeType":"69","messageId":"70","endLine":84,"endColumn":45},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-redeclare","'file' is already defined.","redeclared","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]